import kotlin.Boolean;

CREATE TABLE IF NOT EXISTS staffEntity(
    id TEXT PRIMARY KEY NOT NULL,
    largeImage TEXT DEFAULT NULL,
    mediumImage TEXT DEFAULT NULL,
    firstName TEXT DEFAULT NULL,
    middleName TEXT DEFAULT NULL,
    lastName TEXT DEFAULT NULL,
    fullName TEXT DEFAULT NULL,
    nativeName TEXT DEFAULT NULL,
    description TEXT DEFAULT NULL,
    gender TEXT DEFAULT NULL,
    siteUrl TEXT DEFAULT NULL,
    dateOfBirth TEXT DEFAULT NULL,
    dateOfDeath TEXT DEFAULT NULL,
    age INTEGER DEFAULT NULL,
    isFavourite INTEGER AS Boolean DEFAULT NULL,
    yearsActive TEXT DEFAULT NULL,
    homeTown TEXT DEFAULT NULL,
    bloodType TEXT DEFAULT NULL,
    alternativeNameList TEXT DEFAULT NULL
);

CREATE TABLE IF NOT EXISTS staffMediaCrossRefEntity(
    staffId TEXT NOT NULL,
    mediaId TEXT NOT NULL,
    role TEXT NOT NULL,
    PRIMARY KEY (staffId, mediaId)
);

upsertStaff:
INSERT OR REPLACE INTO staffEntity (
    id,
    largeImage,
    mediumImage,
    firstName,
    middleName,
    lastName,
    fullName,
    nativeName,
    alternativeNameList,
    description,
    gender,
    siteUrl,
    dateOfBirth,
    dateOfDeath,
    age,
    isFavourite,
    yearsActive,
    homeTown,
    bloodType
) VALUES ?;

upsertStaffMediaCrossRef:
INSERT OR REPLACE INTO staffMediaCrossRefEntity (
    staffId,
    mediaId,
    role
) VALUES (?, ?, ?);

deleteStaffOfMedia:
DELETE FROM staffMediaCrossRefEntity WHERE mediaId = ?;

getStaffOfMedia:
SELECT staffEntity.*, staffMediaCrossRefEntity.role FROM staffEntity
INNER JOIN staffMediaCrossRefEntity ON staffMediaCrossRefEntity.staffId = staffEntity.id
WHERE staffMediaCrossRefEntity.mediaId = ?;

getStaffById:
SELECT * FROM staffEntity WHERE id = ?;
